{"cells":[{"cell_type":"markdown","id":"optimum-jungle","metadata":{"id":"optimum-jungle"},"source":["# boostcourse ai224 / 베이스라인 모델 2\n","\n","- 첫번째 베이스라인 모델은 머신러닝 모델을 사용하지 않고 이전 월 고객 구매액을 계산한 후에 이를 예측값으로 사용해서 베이스라인 모델 구현했지만, 두 번째 베이스라인 모델은 이번 강의에서 배운 LightGBM 모델을 사용해서 베이스라인 모델 구현\n","- 첫번째 베이스라인 모델에서 이전 월 고객 구매액만을 피처로 사용하는 것과 달리 두 번째 베이스라인 모델은 2009년 12월부터 예측하기를 원하는 월의 이전 월 전체 데이터를 사용\n","- 우리는 고객의 총 구매액이 300을 넘을지 말지를 예측하는 것인데 주어진 데이터는 개별 거래 데이터이기 때문에 데이터를 고객 기준으로 group by하고 count, sum, mean 등의 집계함수를 사용해서 피처 생성(피처에 대한 상세한 설명은 6강에서 진행)\n","- 2011년 12월 데이터가 없기 때문에 2011년 10월을 train 데이터, 2011년 11월을 validation 데이터로 해서 LightGBM 베이스라인 모델 validation 성능 측정"]},{"cell_type":"markdown","id":"potential-italian","metadata":{"id":"potential-italian"},"source":["## Function 정의\n","\n","- seed_everything() : seed 고정 함수\n","- generate_label() : label 생성 함수\n","- print_score() : 평가지표 출력 함수\n","- feature_preprocessing() : 데이터 전처리 함수(label encoding, 결측치 처리)\n","- feature_engineering1() : 피처 엔지니어링 함수\n","- make_lgb_prediction() : LightGBM train/predict 함수\n","- plot_feature_importances() : LightGBM 피처 중요도 플롯 함수"]},{"cell_type":"markdown","id":"tutorial-sessions","metadata":{"id":"tutorial-sessions"},"source":["## Library Import"]},{"cell_type":"code","execution_count":3,"id":"formal-winter","metadata":{"id":"formal-winter","executionInfo":{"status":"ok","timestamp":1705483320008,"user_tz":-540,"elapsed":3080,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["# Suppress warnings\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","import os, sys, gc, warnings, random\n","from typing import List\n","\n","import datetime\n","import dateutil.relativedelta\n","\n","# Data manipulation\n","import pandas as pd\n","import numpy as np\n","\n","# Visualization\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Machine learning\n","from sklearn.pipeline import Pipeline\n","from sklearn.preprocessing import MinMaxScaler, LabelEncoder\n","from sklearn.impute import SimpleImputer\n","from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score, precision_recall_curve, roc_curve\n","from sklearn.model_selection import train_test_split, cross_val_score, KFold, StratifiedKFold, GroupKFold\n","from sklearn.ensemble import RandomForestClassifier\n","\n","import lightgbm as lgb\n","\n","from tqdm.notebook import trange, tqdm\n","\n","from IPython.display import display\n","\n","%matplotlib inline\n","\n","pd.options.display.max_rows = 10000\n","pd.options.display.max_columns = 1000\n","pd.options.display.max_colwidth = 1000"]},{"cell_type":"markdown","id":"parallel-provincial","metadata":{"id":"parallel-provincial"},"source":["## Fix Seed 함수 정의"]},{"cell_type":"code","execution_count":4,"id":"boolean-edition","metadata":{"id":"boolean-edition","executionInfo":{"status":"ok","timestamp":1705483320009,"user_tz":-540,"elapsed":6,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["'''\n","    결과의 재현성을 위해 seed 값을 설정하는 함수\n","'''\n","def seed_everything(seed=0):\n","    random.seed(seed) #랜덤 시드값 0으로 고정\n","    os.environ['PYTHONHASHSEED'] = str(seed) # 해시에 적용되는 시드값\n","    np.random.seed(seed)\n","\n","SEED = 42 #초기 시드\n","seed_everything(SEED)"]},{"cell_type":"markdown","id":"systematic-rocket","metadata":{"id":"systematic-rocket"},"source":["## 레이블 생성 함수 정의\n","\n","- 레이블 생성 함수는 연월을 인자로 받아서 고객 아이디별로 총 구매액이 인자로 받는 구매액 임계값을 넘는지 여부를 바이너리 레이블로 생성하는 함수"]},{"cell_type":"code","execution_count":5,"id":"abandoned-japan","metadata":{"id":"abandoned-japan","executionInfo":{"status":"ok","timestamp":1705483320009,"user_tz":-540,"elapsed":5,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["TOTAL_THRES = 300\n","\n","'''\n","    입력인자로 받는 year_month에 대해 고객 ID별로 총 구매액이\n","    구매액 임계값을 넘는지 여부의 binary label을 생성하는 함수\n","'''\n","def generate_label( #라벨 지정\n","    df: pd.DataFrame,\n","    year_month: str,\n","    total_thres: int = TOTAL_THRES,\n","    print_log: bool = False\n","):\n","    df = df.copy() #df 데이터프레임 복사\n","\n","    # year_month에 해당하는 label 데이터 생성\n","    df['year_month'] = df['order_date'].dt.strftime('%Y-%m') #orderdate 형태 변경\n","    df.reset_index(drop=True, inplace=True) # 원래열 다른걸로 바꾸기\n","\n","    # year_month 이전 월의 고객 ID 추출\n","    cust = df[df['year_month']<year_month]['customer_id'].unique() # 겹치지 않게, year_month보다 작은 고객id추출\n","    # year_month에 해당하는 데이터 선택\n","    df = df[df['year_month']==year_month] #같은 달의 데이터만 추출\n","\n","    # label 데이터프레임 생성\n","    label = pd.DataFrame({'customer_id':cust}) #라벨을 id로 지정\n","    label['year_month'] = year_month # 같은 달의 라벨로 검색\n","\n","    # year_month에 해당하는 고객 ID의 구매액의 합 계산\n","    grped = df.groupby(['customer_id','year_month'], as_index=False)[['total']].sum() #고객 id, 달로 묶어서 total값\n","\n","    # label 데이터프레임과 merge하고 구매액 임계값을 넘었는지 여부로 label 생성\n","    label = label.merge(grped, on=['customer_id','year_month'], how='left')\n","    label['total'].fillna(0.0, inplace=True)\n","    label['label'] = (label['total'] > total_thres).astype(int) #임계값 넘기면 1, 아니면 0\n","\n","    # 고객 ID로 정렬\n","    label = label.sort_values('customer_id').reset_index(drop=True) # id별로 재정렬\n","    if print_log: print(f'{year_month} - final label shape: {label.shape}')\n","\n","    return label"]},{"cell_type":"markdown","id":"stable-essence","metadata":{"id":"stable-essence"},"source":["## 평가지표 출력 함수 정의"]},{"cell_type":"code","execution_count":6,"id":"national-cancer","metadata":{"id":"national-cancer","executionInfo":{"status":"ok","timestamp":1705483320009,"user_tz":-540,"elapsed":5,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["'''\n","    평가지표를 출력하는 함수\n","'''\n","def print_score(label: List[float], pred: List[float], prob_thres: float = 0.5):\n","    print('Precision: {:.5f}'.format(precision_score(label, pred>prob_thres)))\n","    print('Recall: {:.5f}'.format(recall_score(label, pred>prob_thres)))\n","    print('F1 Score: {:.5f}'.format(f1_score(label, pred>prob_thres)))\n","    print('ROC AUC Score: {:.5f}'.format(roc_auc_score(label, pred)))"]},{"cell_type":"markdown","id":"polar-blackjack","metadata":{"id":"polar-blackjack"},"source":["## 데이터 전처리 함수 정의\n","- 범주형 변수 레이블 인코딩\n","- 결측치 중위값으로 채움"]},{"cell_type":"code","execution_count":7,"id":"rolled-volleyball","metadata":{"id":"rolled-volleyball","executionInfo":{"status":"ok","timestamp":1705483320009,"user_tz":-540,"elapsed":5,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["'''\n","    입력인자로 받는 train, test 데이터에 대해 범주형 피쳐는 레이블 인코딩을\n","    진행하고 결측치에 대해서는 중위값으로 데이터 전처리를 하는 함수\n","'''\n","def feature_preprocessing( #요소에 대해서\n","    train: pd.DataFrame, #학습용 데이터프레임\n","    test: pd.DataFrame, #테스트용 데이터프레임\n","    features: list, #요소들 리스트\n","    do_imputing=True # 결측치 채우기 여부 지정\n","):\n","    x_tr = train.copy()#각 데이터 복사해놓음\n","    x_te = test.copy()\n","\n","    # 범주형 피처 이름을 저장할 변수\n","    cate_cols = [] #\n","\n","    # 레이블 인코딩\n","    for f in features:#각 요소를 가지고 실행\n","        if x_tr[f].dtype.name == 'object': # 데이터 타입이 object(str)이면 레이블 인코딩\n","            cate_cols.append(f)#범주형 칼럼에 추가함\n","            le = LabelEncoder()# 라벨 인코더 객체 생성\n","            #라벨 인코더는 임계값에 따라 0과 1로 바꿔서 저장함\n","            # train + test 데이터를 합쳐서 레이블 인코딩 함수에 fit\n","            le.fit(list(x_tr[f].values) + list(x_te[f].values))#테스트셋, 학습용 두 리스트에서 현재 요소 f의 값을 가지고 계산 진행\n","\n","            # train 데이터 레이블 인코딩 변환 수행\n","            x_tr[f] = le.transform(list(x_tr[f].values))# 트레인 셋 f 요소의 데이터값들을 라벨화시킴\n","\n","            # test 데이터 레이블 인코딩 변환 수행\n","            x_te[f] = le.transform(list(x_te[f].values))# 테스트 셋 ''\n","\n","    print('categorical feature:', cate_cols)\n","\n","    if do_imputing:#결측치 여부 참이면 돌림\n","        # 중위값으로 결측치 채우기\n","        imputer = SimpleImputer(strategy='median') # 결측값 채우기 함수, 방식을 중간값으로 지정\n","\n","        x_tr[features] = imputer.fit_transform(x_tr[features]) # 트레인셋에만 사용됨\n","        x_te[features] = imputer.transform(x_te[features]) # 테스트 데이터에 대해 적용됨\n","\n","    return x_tr, x_te"]},{"cell_type":"markdown","id":"nearby-recycling","metadata":{"id":"nearby-recycling"},"source":["## 피처 엔지니어링 함수 정의\n","- Pandas groupby aggregation 함수를 사용한 피처 엔지니어링"]},{"cell_type":"code","execution_count":8,"id":"continuing-story","metadata":{"id":"continuing-story","executionInfo":{"status":"ok","timestamp":1705483320009,"user_tz":-540,"elapsed":4,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["'''\n","    입력인자로 받는 year_month와 변수 prev_ym 기준으로 train, test 데이터를 생성 하고\n","    집계(aggregation) 함수를 사용하여 피처 엔지니어링을 하는 함수\n","'''\n","def feature_engineering1(df: pd.DataFrame, year_month: str): #피처 엔지니어링 함수 선언\n","    df = df.copy() # 데이터 변수 복사함\n","\n","    # year_month 이전 월 계산\n","    d = datetime.datetime.strptime(year_month, \"%Y-%m\")# 저번 달 내용 찾음\n","    prev_ym = d - dateutil.relativedelta.relativedelta(months=1)#이전 월 찾아서 새로 저장\n","    prev_ym = prev_ym.strftime('%Y-%m')# 해당 데이터 형태를 변경\n","\n","    # train, test 데이터 선택\n","    train = df[df['order_date'] < prev_ym] #지정된 달 이전 데이터를 전부 트레인셋으로 지정함\n","    test = df[df['order_date'] < year_month] # 지정된 달 이후 데이터를 테스트 셋으로 지정함?\n","\n","    # train, test 레이블 데이터 생성\n","    train_label = generate_label(df, prev_ym)[['customer_id','year_month','label']]\n","    test_label = generate_label(df, year_month)[['customer_id','year_month','label']]\n","    #트레인셋, 테스트 셋 만들기, df에서 prev_ym조건 맞는 데이터들 뽑아서 고객id, 연월, 라벨로 집어넣음\n","\n","    # group by aggregation 함수 선언\n","    agg_func = ['mean','max','min','sum','count','std','skew'] #어그리게이션 요소 지정\n","    all_train_data = pd.DataFrame() # 데이터 프레임으로 전체 트레인 셋 변경\n","\n","    for i, tr_ym in enumerate(train_label['year_month'].unique()): #year,month기준으로 데이터 추출\n","        # group by aggretation 함수로 train 데이터 피처 생성\n","        train_agg = train.loc[train['order_date'] < tr_ym].groupby(['customer_id']).agg(agg_func)\n","        # 고객 ID기준으로 그룹화 후, 지정된 어그리게이션 함수 적용\n","\n","        # 멀티 레벨 컬럼을 사용하기 쉽게 1 레벨 컬럼명으로 변경\n","        new_cols = []\n","        for col in train_agg.columns.levels[0]: #1차원 칼럼명을 확인함\n","            for stat in train_agg.columns.levels[1]: #2차원 칼럼명을 확인함\n","                new_cols.append(f'{col}-{stat}') # 새로운 칼럼 명을 '1차원-2차원'으로 지정함\n","\n","        train_agg.columns = new_cols # 트레인 셋에 새로운 새로운 칼럼명 적용\n","        train_agg.reset_index(inplace = True)# 인덱스의 교체\n","\n","        train_agg['year_month'] = tr_ym # year_month에 현재 연월 추가\n","\n","        all_train_data = all_train_data.append(train_agg)# 현재 연월의 트레인 셋 추가\n","\n","    #학습된 데이터의 레이블과 이후 생성된 데이터를 고객id, year_month 기준으로 합침\n","    all_train_data = train_label.merge(all_train_data, on=['customer_id', 'year_month'], how='left')\n","    features = all_train_data.drop(columns=['customer_id', 'label', 'year_month']).columns\n","    # 요소는 고객id, 라벨, year_month 요소를 제외한 나머지로 지정\n","\n","    # group by aggretation 함수로 test 데이터 피처 생성\n","    test_agg = test.groupby(['customer_id']).agg(agg_func)\n","    test_agg.columns = new_cols# 요소별로 어그리게이션 함수 적용\n","\n","    test_data = test_label.merge(test_agg, on=['customer_id'], how='left')#데이터 병합\n","\n","    # train, test 데이터 전처리\n","    x_tr, x_te = feature_preprocessing(all_train_data, test_data, features)\n","    #모든 트레인셋, 테스트 데이터를 요소별 전처리 시킴\n","\n","    print('x_tr.shape', x_tr.shape, ', x_te.shape', x_te.shape)\n","\n","    return x_tr, x_te, all_train_data['label'], features"]},{"cell_type":"markdown","id":"advisory-communication","metadata":{"id":"advisory-communication"},"source":["## LightGBM train/predict 함수 정의"]},{"cell_type":"code","execution_count":9,"id":"welsh-national","metadata":{"id":"welsh-national","executionInfo":{"status":"ok","timestamp":1705483320010,"user_tz":-540,"elapsed":5,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["'''\n","    학습 데이터(train), 테스트 데이터(test)로 LightGBM 모델을\n","    학습 및 테스트하고 사용된 피처들의 중요도를 반환하는 함수\n","'''\n","# 학습 데이터프레임, 타겟변수, 테스트 프레임, 요소 리스트, 범주형 요소인지 자동으로 분류, 하이퍼 매개변수\n","def make_lgb_prediction(train, y, test, features, categorical_features='auto', model_params=None):\n","    x_train = train[features] #학습데이터에서 지정된 요소 데이터들을 가져옴\n","    x_test = test[features] # 테스트 데이터에서 지정된 요소 데이터들을 가져옴\n","\n","    print(x_train.shape, x_test.shape)\n","\n","    # 피처 중요도를 저장할 데이터 프레임 선언\n","    fi = pd.DataFrame()  #특성 중요도 저장용 데이터프레임 생성\n","    fi['feature'] = features # 해당 요소 칼럼에 넣음\n","\n","    # LightGBM 데이터셋 선언\n","    dtrain = lgb.Dataset(x_train, label=y)\n","\n","    # LightGBM 모델 훈련\n","    clf = lgb.train(\n","        model_params,# 해당 모델의 하이퍼 파라미터에 설정된 매개변수\n","        dtrain, # 학습데이터셋\n","        categorical_feature=categorical_features, #범주형 요소 지정\n","        verbose_eval=200 #출력 로그 간격설정\n","    )\n","\n","    # 테스트 데이터 예측\n","    test_preds = clf.predict(x_test)\n","\n","    # 피처 중요도 저장\n","    fi['importance'] = clf.feature_importance()\n","\n","    return test_preds, fi"]},{"cell_type":"markdown","id":"widespread-revolution","metadata":{"id":"widespread-revolution"},"source":["## LightGBM 피처 중요도 플롯 함수 정의"]},{"cell_type":"code","execution_count":10,"id":"viral-sphere","metadata":{"id":"viral-sphere","executionInfo":{"status":"ok","timestamp":1705483320010,"user_tz":-540,"elapsed":5,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["'''\n","    피처 중요도 정규화(importance_normalized) 및 누적 중요도(cumulative_importance)를 계산하고\n","    중요도 정규화 순으로 n개의 바플롯을 그리는 함수\n","'''\n","def plot_feature_importances(df, n=20, color='blue', figsize=(12,8)):\n","    # 피처 중요도 순으로 내림차순 정렬\n","    df = df.sort_values('importance', ascending = False).reset_index(drop = True)\n","\n","    # 피처 중요도 정규화 및 누적 중요도 계산\n","    df['importance_normalized'] = df['importance'] / df['importance'].sum()\n","    df['cumulative_importance'] = np.cumsum(df['importance_normalized'])\n","\n","    #데이터 출력 지정\n","    plt.rcParams['font.size'] = 12\n","    plt.style.use('fivethirtyeight')\n","    # 피처 중요도 순으로 n개까지 바플롯으로 그리기\n","    df.loc[:n, :].plot.barh(y='importance_normalized',\n","                            x='feature', color=color,\n","                            edgecolor='k', figsize=figsize,\n","                            legend=False)\n","\n","    plt.xlabel('Normalized Importance', size=18); plt.ylabel('');\n","    plt.title(f'Top {n} Most Important Features', size=18)\n","    plt.gca().invert_yaxis()\n","\n","    return df"]},{"cell_type":"markdown","id":"proved-science","metadata":{"id":"proved-science"},"source":["## Train 데이터 읽기\n","- 9개의 feature를 가진 780502개의 train data"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vhVRcARCuIzz","executionInfo":{"status":"ok","timestamp":1705483321966,"user_tz":-540,"elapsed":1960,"user":{"displayName":"김동규","userId":"10084542302998883442"}},"outputId":"81ac18d1-1829-4f5f-ff3f-ab3da6380930"},"id":"vhVRcARCuIzz","execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","execution_count":12,"id":"alternate-electric","metadata":{"id":"alternate-electric","outputId":"179212ba-1da7-4aa6-ddff-165f8786252e","colab":{"base_uri":"https://localhost:8080/","height":363},"executionInfo":{"status":"ok","timestamp":1705483325072,"user_tz":-540,"elapsed":3108,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["(780502, 9)\n"]},{"output_type":"execute_result","data":{"text/plain":["  order_id product_id                          description  quantity  \\\n","0   489434      85048  15CM CHRISTMAS GLASS BALL 20 LIGHTS        12   \n","1   489434     79323P                   PINK CHERRY LIGHTS        12   \n","2   489434     79323W                  WHITE CHERRY LIGHTS        12   \n","3   489434      22041         RECORD FRAME 7\" SINGLE SIZE         48   \n","4   489434      21232       STRAWBERRY CERAMIC TRINKET BOX        24   \n","\n","           order_date    price  customer_id         country   total  \n","0 2009-12-01 07:45:00  11.4675        13085  United Kingdom  137.61  \n","1 2009-12-01 07:45:00  11.1375        13085  United Kingdom  133.65  \n","2 2009-12-01 07:45:00  11.1375        13085  United Kingdom  133.65  \n","3 2009-12-01 07:45:00   3.4650        13085  United Kingdom  166.32  \n","4 2009-12-01 07:45:00   2.0625        13085  United Kingdom   49.50  "],"text/html":["\n","  <div id=\"df-65947c3a-44a7-46f0-bb27-22ecb7aabd23\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","      <th>product_id</th>\n","      <th>description</th>\n","      <th>quantity</th>\n","      <th>order_date</th>\n","      <th>price</th>\n","      <th>customer_id</th>\n","      <th>country</th>\n","      <th>total</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>489434</td>\n","      <td>85048</td>\n","      <td>15CM CHRISTMAS GLASS BALL 20 LIGHTS</td>\n","      <td>12</td>\n","      <td>2009-12-01 07:45:00</td>\n","      <td>11.4675</td>\n","      <td>13085</td>\n","      <td>United Kingdom</td>\n","      <td>137.61</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>489434</td>\n","      <td>79323P</td>\n","      <td>PINK CHERRY LIGHTS</td>\n","      <td>12</td>\n","      <td>2009-12-01 07:45:00</td>\n","      <td>11.1375</td>\n","      <td>13085</td>\n","      <td>United Kingdom</td>\n","      <td>133.65</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>489434</td>\n","      <td>79323W</td>\n","      <td>WHITE CHERRY LIGHTS</td>\n","      <td>12</td>\n","      <td>2009-12-01 07:45:00</td>\n","      <td>11.1375</td>\n","      <td>13085</td>\n","      <td>United Kingdom</td>\n","      <td>133.65</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>489434</td>\n","      <td>22041</td>\n","      <td>RECORD FRAME 7\" SINGLE SIZE</td>\n","      <td>48</td>\n","      <td>2009-12-01 07:45:00</td>\n","      <td>3.4650</td>\n","      <td>13085</td>\n","      <td>United Kingdom</td>\n","      <td>166.32</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>489434</td>\n","      <td>21232</td>\n","      <td>STRAWBERRY CERAMIC TRINKET BOX</td>\n","      <td>24</td>\n","      <td>2009-12-01 07:45:00</td>\n","      <td>2.0625</td>\n","      <td>13085</td>\n","      <td>United Kingdom</td>\n","      <td>49.50</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65947c3a-44a7-46f0-bb27-22ecb7aabd23')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-65947c3a-44a7-46f0-bb27-22ecb7aabd23 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-65947c3a-44a7-46f0-bb27-22ecb7aabd23');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ed8cd329-8dd8-465c-947c-aecd7b97e397\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ed8cd329-8dd8-465c-947c-aecd7b97e397')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ed8cd329-8dd8-465c-947c-aecd7b97e397 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":12}],"source":["data = pd.read_csv(\"/content/drive/MyDrive/네이버 부스트클래스 관련폴더/1주차/3차시_데이터 전처리 연습/input/train.csv\", parse_dates=[\"order_date\"])\n","print(data.shape) # data shape 확인\n","data.head()"]},{"cell_type":"markdown","id":"natural-recognition","metadata":{"id":"natural-recognition"},"source":["## Pandas info() 함수로 데이터 타입 및 null 체크"]},{"cell_type":"code","execution_count":13,"id":"engaging-hospital","metadata":{"id":"engaging-hospital","outputId":"4e01e569-82ee-4996-9fa4-df4e5c2d28e3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705483325830,"user_tz":-540,"elapsed":764,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 780502 entries, 0 to 780501\n","Data columns (total 9 columns):\n"," #   Column       Non-Null Count   Dtype         \n","---  ------       --------------   -----         \n"," 0   order_id     780502 non-null  object        \n"," 1   product_id   780502 non-null  object        \n"," 2   description  780502 non-null  object        \n"," 3   quantity     780502 non-null  int64         \n"," 4   order_date   780502 non-null  datetime64[ns]\n"," 5   price        780502 non-null  float64       \n"," 6   customer_id  780502 non-null  int64         \n"," 7   country      780502 non-null  object        \n"," 8   total        780502 non-null  float64       \n","dtypes: datetime64[ns](1), float64(2), int64(2), object(4)\n","memory usage: 53.6+ MB\n"]}],"source":["data.info()"]},{"cell_type":"markdown","id":"loose-lingerie","metadata":{"id":"loose-lingerie"},"source":["## Pandas isna(), sum() 함수로 null 데이터 개수 체크"]},{"cell_type":"code","execution_count":14,"id":"honest-coaching","metadata":{"id":"honest-coaching","outputId":"3cf4a455-db2a-489b-bc16-1380d6a98897","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1705483326111,"user_tz":-540,"elapsed":584,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["order_id       0\n","product_id     0\n","description    0\n","quantity       0\n","order_date     0\n","price          0\n","customer_id    0\n","country        0\n","total          0\n","dtype: int64"]},"metadata":{},"execution_count":14}],"source":["data.isna().sum()"]},{"cell_type":"markdown","id":"raised-family","metadata":{"id":"raised-family"},"source":["## Pandas describe() 함수에 include='all' 인자 설정으로 수치형, 범주형 데이터 기본 통계량 확인"]},{"cell_type":"code","execution_count":15,"id":"excess-university","metadata":{"id":"excess-university","outputId":"2458c920-0a9b-4fa3-bf3e-7f05dc19ccf0","colab":{"base_uri":"https://localhost:8080/","height":581},"executionInfo":{"status":"ok","timestamp":1705483326921,"user_tz":-540,"elapsed":811,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       order_id product_id                         description       quantity  \\\n","count    780502     780502                              780502  780502.000000   \n","unique    43955       4645                                5297            NaN   \n","top      576339     85123A  WHITE HANGING HEART T-LIGHT HOLDER            NaN   \n","freq        542       5096                                5096            NaN   \n","first       NaN        NaN                                 NaN            NaN   \n","last        NaN        NaN                                 NaN            NaN   \n","mean        NaN        NaN                                 NaN      12.623307   \n","std         NaN        NaN                                 NaN     143.906302   \n","min         NaN        NaN                                 NaN  -74215.000000   \n","25%         NaN        NaN                                 NaN       2.000000   \n","50%         NaN        NaN                                 NaN       5.000000   \n","75%         NaN        NaN                                 NaN      12.000000   \n","max         NaN        NaN                                 NaN   74215.000000   \n","\n","                 order_date          price    customer_id         country  \\\n","count                780502  780502.000000  780502.000000          780502   \n","unique                40615            NaN            NaN              41   \n","top     2011-11-14 15:27:00            NaN            NaN  United Kingdom   \n","freq                    543            NaN            NaN          700317   \n","first   2009-12-01 07:45:00            NaN            NaN             NaN   \n","last    2011-11-30 17:42:00            NaN            NaN             NaN   \n","mean                    NaN       6.140931   15313.393466             NaN   \n","std                     NaN     119.042266    1695.765797             NaN   \n","min                     NaN       0.000000   12346.000000             NaN   \n","25%                     NaN       2.062500   13963.000000             NaN   \n","50%                     NaN       3.217500   15239.000000             NaN   \n","75%                     NaN       6.187500   16788.000000             NaN   \n","max                     NaN   64300.500000   18287.000000             NaN   \n","\n","                total  \n","count   780502.000000  \n","unique            NaN  \n","top               NaN  \n","freq              NaN  \n","first             NaN  \n","last              NaN  \n","mean        33.715373  \n","std        274.207403  \n","min    -127352.940000  \n","25%          7.260000  \n","50%         19.470000  \n","75%         32.175000  \n","max     127352.940000  "],"text/html":["\n","  <div id=\"df-4adb2410-02ba-49f5-8167-1ec1c28c604c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","      <th>product_id</th>\n","      <th>description</th>\n","      <th>quantity</th>\n","      <th>order_date</th>\n","      <th>price</th>\n","      <th>customer_id</th>\n","      <th>country</th>\n","      <th>total</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>780502</td>\n","      <td>780502</td>\n","      <td>780502</td>\n","      <td>780502.000000</td>\n","      <td>780502</td>\n","      <td>780502.000000</td>\n","      <td>780502.000000</td>\n","      <td>780502</td>\n","      <td>780502.000000</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>43955</td>\n","      <td>4645</td>\n","      <td>5297</td>\n","      <td>NaN</td>\n","      <td>40615</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>41</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>576339</td>\n","      <td>85123A</td>\n","      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n","      <td>NaN</td>\n","      <td>2011-11-14 15:27:00</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>United Kingdom</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>542</td>\n","      <td>5096</td>\n","      <td>5096</td>\n","      <td>NaN</td>\n","      <td>543</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>700317</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>first</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2009-12-01 07:45:00</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>last</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2011-11-30 17:42:00</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>12.623307</td>\n","      <td>NaN</td>\n","      <td>6.140931</td>\n","      <td>15313.393466</td>\n","      <td>NaN</td>\n","      <td>33.715373</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>143.906302</td>\n","      <td>NaN</td>\n","      <td>119.042266</td>\n","      <td>1695.765797</td>\n","      <td>NaN</td>\n","      <td>274.207403</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>-74215.000000</td>\n","      <td>NaN</td>\n","      <td>0.000000</td>\n","      <td>12346.000000</td>\n","      <td>NaN</td>\n","      <td>-127352.940000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2.000000</td>\n","      <td>NaN</td>\n","      <td>2.062500</td>\n","      <td>13963.000000</td>\n","      <td>NaN</td>\n","      <td>7.260000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>5.000000</td>\n","      <td>NaN</td>\n","      <td>3.217500</td>\n","      <td>15239.000000</td>\n","      <td>NaN</td>\n","      <td>19.470000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>12.000000</td>\n","      <td>NaN</td>\n","      <td>6.187500</td>\n","      <td>16788.000000</td>\n","      <td>NaN</td>\n","      <td>32.175000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>74215.000000</td>\n","      <td>NaN</td>\n","      <td>64300.500000</td>\n","      <td>18287.000000</td>\n","      <td>NaN</td>\n","      <td>127352.940000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4adb2410-02ba-49f5-8167-1ec1c28c604c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4adb2410-02ba-49f5-8167-1ec1c28c604c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4adb2410-02ba-49f5-8167-1ec1c28c604c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4298e499-d797-4cba-9e05-0749e0262225\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4298e499-d797-4cba-9e05-0749e0262225')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4298e499-d797-4cba-9e05-0749e0262225 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":15}],"source":["data.describe(include='all')"]},{"cell_type":"markdown","id":"sixth-wallace","metadata":{"id":"sixth-wallace"},"source":["## 2011년 11월 Label 데이터 생성"]},{"cell_type":"code","execution_count":16,"id":"formed-commission","metadata":{"id":"formed-commission","executionInfo":{"status":"ok","timestamp":1705483330407,"user_tz":-540,"elapsed":3488,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["label_2011_11 = generate_label(data, '2011-11')['label']"]},{"cell_type":"markdown","id":"varied-parker","metadata":{"id":"varied-parker"},"source":["## Label 데이터 분포 플롯"]},{"cell_type":"code","execution_count":17,"id":"instant-center","metadata":{"id":"instant-center","outputId":"3a673376-834a-4108-b8b1-501d96682654","colab":{"base_uri":"https://localhost:8080/","height":485},"executionInfo":{"status":"ok","timestamp":1705483395017,"user_tz":-540,"elapsed":64611,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    4534\n","1    1188\n","Name: label, dtype: int64"]},"metadata":{},"execution_count":17},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["sns.countplot(label_2011_11);\n","label_2011_11.value_counts()"]},{"cell_type":"markdown","id":"invalid-exhibit","metadata":{"id":"invalid-exhibit"},"source":["## LightGBM Hyperparameter 선언"]},{"cell_type":"code","execution_count":18,"id":"honey-liability","metadata":{"id":"honey-liability","executionInfo":{"status":"ok","timestamp":1705483395017,"user_tz":-540,"elapsed":3,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["model_params = {\n","    'objective': 'binary', # 이진 분류\n","    'boosting_type': 'gbdt',\n","    'metric': 'auc', # 평가 지표 설정\n","    'feature_fraction': 0.8, # 피처 샘플링 비율\n","    'bagging_fraction': 0.8, # 데이터 샘플링 비율\n","    'bagging_freq': 1,\n","    'n_estimators': 100, # 트리 개수\n","    'seed': SEED,\n","    'verbose': -1,\n","    'n_jobs': -1,\n","}"]},{"cell_type":"markdown","id":"informative-senator","metadata":{"id":"informative-senator"},"source":["## 2011년 11월 베이스라인 모델 예측\n","- Validation 성능 측정"]},{"cell_type":"code","execution_count":19,"id":"different-litigation","metadata":{"id":"different-litigation","outputId":"152ca056-a0b6-4124-f4ee-ab48fd162edd","colab":{"base_uri":"https://localhost:8080/","height":404},"executionInfo":{"status":"error","timestamp":1705483410246,"user_tz":-540,"elapsed":15231,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["categorical feature: []\n","x_tr.shape (5501, 24) , x_te.shape (5722, 24)\n","(5501, 21) (5722, 21)\n"]},{"output_type":"error","ename":"TypeError","evalue":"train() got an unexpected keyword argument 'verbose_eval'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-d4436d591d22>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatures\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfeature_engineering1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'2011-11'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtest_preds_2011_11\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_lgb_prediction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_params\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel_2011_11\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_preds_2011_11\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-9-8369d307697d>\u001b[0m in \u001b[0;36mmake_lgb_prediction\u001b[0;34m(train, y, test, features, categorical_features, model_params)\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0;31m# LightGBM 모델 훈련\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m     clf = lgb.train(\n\u001b[0m\u001b[1;32m     21\u001b[0m         \u001b[0mmodel_params\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;31m# 해당 모델의 하이퍼 파라미터에 설정된 매개변수\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;31m# 학습데이터셋\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: train() got an unexpected keyword argument 'verbose_eval'"]}],"source":["train, test, y, features = feature_engineering1(data, '2011-11')\n","test_preds_2011_11, fi = make_lgb_prediction(train, y, test, features, model_params=model_params)\n","print_score(label_2011_11, test_preds_2011_11)"]},{"cell_type":"markdown","id":"literary-object","metadata":{"id":"literary-object"},"source":["## 2011년 11월 베이스라인 모델 예측 데이터 분포"]},{"cell_type":"code","execution_count":null,"id":"toxic-ending","metadata":{"id":"toxic-ending","executionInfo":{"status":"aborted","timestamp":1705483410247,"user_tz":-540,"elapsed":4,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["sns.distplot(test_preds_2011_11)\n","plt.show()"]},{"cell_type":"markdown","id":"dedicated-convention","metadata":{"id":"dedicated-convention"},"source":["## 2011년 12월 베이스라인 모델 예측\n","- 테스트 데이터 제출"]},{"cell_type":"code","execution_count":null,"id":"significant-kingdom","metadata":{"id":"significant-kingdom","executionInfo":{"status":"aborted","timestamp":1705483410247,"user_tz":-540,"elapsed":4,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["train, test, y, features = feature_engineering1(data, '2011-12')\n","test_preds, fi = make_lgb_prediction(train, y, test, features, model_params=model_params)"]},{"cell_type":"markdown","id":"approximate-hacker","metadata":{"id":"approximate-hacker"},"source":["## 2011년 12월 베이스라인 모델 예측 데이터 분포"]},{"cell_type":"code","execution_count":null,"id":"expressed-comparison","metadata":{"id":"expressed-comparison","executionInfo":{"status":"aborted","timestamp":1705483410247,"user_tz":-540,"elapsed":4,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["sns.distplot(test_preds)\n","plt.show()"]},{"cell_type":"markdown","id":"spiritual-antibody","metadata":{"id":"spiritual-antibody"},"source":["## 피처 중요도 플롯"]},{"cell_type":"code","execution_count":null,"id":"terminal-sherman","metadata":{"id":"terminal-sherman","executionInfo":{"status":"aborted","timestamp":1705483410247,"user_tz":-540,"elapsed":4,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["fi = plot_feature_importances(fi)"]},{"cell_type":"markdown","id":"wrong-catering","metadata":{"id":"wrong-catering"},"source":["# 제출 파일 생성"]},{"cell_type":"code","execution_count":null,"id":"quick-manchester","metadata":{"id":"quick-manchester","executionInfo":{"status":"aborted","timestamp":1705483410247,"user_tz":-540,"elapsed":4,"user":{"displayName":"김동규","userId":"10084542302998883442"}}},"outputs":[],"source":["output_dir = '../output'\n","os.makedirs(output_dir, exist_ok=True)\n","submission = pd.read_csv('../input/sample_submission.csv')\n","submission['probability'] = test_preds\n","submission.to_csv(os.path.join(output_dir, 'output.csv'), index=False)"]}],"metadata":{"hide_input":false,"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.1"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"colab":{"provenance":[{"file_id":"15xoJNsnztdeLJjtigNUkFvVT8IRIxGa5","timestamp":1705482822858}]}},"nbformat":4,"nbformat_minor":5}